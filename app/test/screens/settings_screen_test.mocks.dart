// Mocks generated by Mockito 5.4.4 from annotations
// in funding_machine/test/screens/settings_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i3;

import 'package:flutter/material.dart' as _i2;
import 'package:funding_machine/providers/theme_provider.dart' as _i4;
import 'package:funding_machine/services/localization_service.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeThemeData_0 extends _i1.SmartFake implements _i2.ThemeData {
  _FakeThemeData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeIconData_1 extends _i1.SmartFake implements _i2.IconData {
  _FakeIconData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocale_2 extends _i1.SmartFake implements _i3.Locale {
  _FakeLocale_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ThemeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeProvider extends _i1.Mock implements _i4.ThemeProvider {
  MockThemeProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ThemeMode get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i2.ThemeMode.system,
      ) as _i2.ThemeMode);

  @override
  bool get isDarkMode => (super.noSuchMethod(
        Invocation.getter(#isDarkMode),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setThemeMode(_i2.ThemeMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setThemeMode,
          [mode],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> toggleTheme() => (super.noSuchMethod(
        Invocation.method(
          #toggleTheme,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i2.ThemeData getTheme(_i2.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #getTheme,
          [context],
        ),
        returnValue: _FakeThemeData_0(
          this,
          Invocation.method(
            #getTheme,
            [context],
          ),
        ),
      ) as _i2.ThemeData);

  @override
  String getThemeModeName() => (super.noSuchMethod(
        Invocation.method(
          #getThemeModeName,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getThemeModeName,
            [],
          ),
        ),
      ) as String);

  @override
  _i2.IconData getThemeIcon() => (super.noSuchMethod(
        Invocation.method(
          #getThemeIcon,
          [],
        ),
        returnValue: _FakeIconData_1(
          this,
          Invocation.method(
            #getThemeIcon,
            [],
          ),
        ),
      ) as _i2.IconData);

  @override
  void addListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocalizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationService extends _i1.Mock
    implements _i7.LocalizationService {
  MockLocalizationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Locale get locale => (super.noSuchMethod(
        Invocation.getter(#locale),
        returnValue: _FakeLocale_2(
          this,
          Invocation.getter(#locale),
        ),
      ) as _i3.Locale);

  @override
  _i5.Stream<_i3.Locale> get onLocaleChanged => (super.noSuchMethod(
        Invocation.getter(#onLocaleChanged),
        returnValue: _i5.Stream<_i3.Locale>.empty(),
      ) as _i5.Stream<_i3.Locale>);

  @override
  _i5.Future<void> setLocale(_i3.Locale? newLocale) => (super.noSuchMethod(
        Invocation.method(
          #setLocale,
          [newLocale],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  bool isRTL() => (super.noSuchMethod(
        Invocation.method(
          #isRTL,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String getCurrentLanguageName() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLanguageName,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getCurrentLanguageName,
            [],
          ),
        ),
      ) as String);
}
